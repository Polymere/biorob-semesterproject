import sys
import yaml
import numpy as np
import pandas as pd
import os
import time
from run_batch_controller.run_launcher import CppLauncher
from utils.file_utils import assert_file_exists,assert_dir
from data_analysis.process_run import CppRunProcess,PythonRunProcess

ROOT_RESULT_DIR = "/data/prevel/runs"
NORUNMODE=True
NORUNMODE_RESULTDIR="/data/prevel/runs/new_cpp_moodrange/param1"

class EvolutionController():
	"""docstring for ClassName"""
	max_nb_gen=100
	nb_ind=10
	cross_rate=0.1
	mut_rate=0.1
	dofs={"G_SOL":(0,2.0),
			"G_GAS":(0,2.0)}#"GSOL":(0,100)}
	init_pop_mode="rand"
	# Random values within boundaries
	bound_mod="step" 
	# only valid one for now, maybe allow going above boundaries (soft boundaries) for a certain cost (optimization param)
	
	def __init__(self, ev_config):

		self.__dict__.update(ev_config)

		self.trial_dir = os.path.join(ROOT_RESULT_DIR, time.strftime("%j_%H:%M"))

		assert_dir(self.trial_dir,should_be_empty=True)
		with open(os.path.join(self.trial_dir,"ev_params.yaml"),"w+") as outparams:
			yaml.dump(self.__dict__)
		print("############\n",self.__dict__,"\n############")
		self.run_launcher=None
		self.nb_gen=0
		self.flatten_params()
		self.current_pop={}
	def init_pop(self):

		if self.init_pop_mode=="rand":
			# random parameters within boundaries
			for i in range(self.nb_ind):

				uid="gen"+str(self.nb_gen)+"ind"+str(i+1)
				if NORUNMODE:
					uid=str(i+1)
				vals=(self._bound_high-self._bound_low)*np.random.rand(len(self._bound_low)) - self._bound_low
				#print(vals)
				self.current_pop[uid]=dict(zip(self.dof_names,vals))
		elif self.init_pop_mode=="one_parent":
			# initial population is generated by mutating a reference parent (working initial parameter set)
			raise NotImplementedError
		elif self.init_pop_mode=="multiple_parent":
			# initial population is generated by mutation and crossover of a full parent population
			# can be used to restart evolution from a certain generation
			raise NotImplementedError
					
		eval_pop=self.eval_pop(self.current_pop)

		selected=self.select(self.sort_pop(eval_pop))
		self.childrens=self.cross_and_mutate(selected)
		self.nb_gen+=1

	def evolve(self):
		self.init_pop()
		while not self.is_stop():
			self.eval_pop(self.childrens)
			union=None

			self.nb_gen+=1
	def check_bound(self,population):
		raise NotImplementedError
	def cross_and_mutate(self,selected_parents):
		couples=np.random.randint(0, len(selected_parents.index), (2,self.nb_ind))
		print("\n",couples)
		print("\nP1",selected_parents.iloc[couples[0][:]],
			"\tP2",selected_parents.iloc[couples[1][:]])
		raise NotImplementedError

	def select(self,sorted_pop):
		print(sorted_pop.head(5))
		return sorted_pop.head(5)#["uid"]

	def sort_pop(self,eval_pop):
		eval_pop["fitness"]=eval_pop.filter(like="cor").sum(1)
		return eval_pop.sort_values("fitness",ascending=False)

		
		#raise NotImplementedError
	def eval_pop(self,population):
		if NORUNMODE:
			#print(self.current_pop)
			scores=self.run_processor.process_gen(NORUNMODE_RESULTDIR)
			print("\n[DEBUG] Eval pop\n",scores)
		else:	
			result_dir=self.run_launcher.run_batch("pop",population,self.nb_gen)
			scores=self.run_processor.process_gen(result_dir)
		return scores
			
				


	def is_stop(self):
		if self.nb_gen>self.max_nb_gen:
			return True
	def flatten_params(self):
		nb_par=len(self.dofs)
		self._bound_low=np.empty(nb_par, np.float16)
		self._bound_high=np.empty(nb_par, np.float16)
		self._params=[]
		self.dof_names=[]
		i=0
		for dof_name,dof_bounds in self.dofs.items():
			self._bound_low[i]=dof_bounds[0]
			self._bound_high[i]=dof_bounds[1]
			self.dof_names.append(dof_name)
			i+=1

class PythonEvolutionController(EvolutionController):
	def __init__(self,worlds,**kwargs):
		EvolutionController.__init__(self,worlds,**kwargs)
		self.run_launcher=PythonLauncher(self.world_dir,trial_dir=self.trial_dir)
		if "kinematics_compare_file" in kwargs.keys():
			compare_files=kwargs["kinematics_compare_file"]
		else:
			compare_files=None
		self.run_processor=PythonRunProcess(compare_files)

class CppEvolutionController(EvolutionController):
	def __init__(self,config_file):
		params=yaml.load(open(config_file, 'r'))
		if "kinematics_compare_file" in params.keys():
			compare_files=params["kinematics_compare_file"]
			del params["kinematics_compare_file"]
		else:
			compare_files=None

		EvolutionController.__init__(self,params)
		self.run_launcher=CppLauncher(self.world_dir,trial_dir=self.trial_dir)

		self.run_processor=CppRunProcess(compare_files)

if __name__ == '__main__':
	config_file="ev_config_template.yaml"
	mode="cpp"
	assert_file_exists(config_file, should_exist=True)
	if mode=="cpp":
		c=CppEvolutionController(config_file)
		c.evolve()